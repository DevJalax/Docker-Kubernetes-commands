
package com.npst.cc.upiserver.utils;

import java.io.StringReader;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Logger;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import org.npci.upi.schema.ReqPay;
import org.npci.upi.schema.RiskScoresType.Score;
import org.springframework.beans.factory.annotation.Autowired;

import com.npst.cc.entity.upiserver.UpiCCDpsAmlHist;
import com.npst.cc.repo.upiserver.UpiCCDpsAmlHistRepo;
import com.npst.cc.upiserver.common.Constants;

public class Test {
	
	@Autowired
	public static UpiCCDpsAmlHistRepo upiCCDpsAmlHistRepo;
	
	
	public static void getRepo() {
		UpiCCDpsAmlHist hist = new UpiCCDpsAmlHist();
		hist = upiCCDpsAmlHistRepo.findFirstByIdOrderByTimestampDesc((long) 1);
		System.out.println("fetched val is"+hist);
	}
	
	public static void main(String[] args) {

		String request = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
				+ "<ns2:ReqPay xmlns:ns2=\"http://npci.org/upi/schema/\" xmlns:ns3=\"http://npci.org/cm/schema/\">\n"
				+ "    <Head msgId=\"9da2B9Qrb\" orgId=\"NPCI\" ts=\"2024-04-23T12:53:58+05:30\" ver=\"2.0\"/>\n"
				+ "    <Meta/>\n"
				+ "    <Txn custRef=\"411415877840\" id=\"CANFY59FP4N1N39B12KX0L778NEPDWLG17H\" initiationMode=\"00\" note=\"-\" purpose=\"00\" refId=\"CANFY59FP4N1N39B12KX0L778NEPDWLG17H\" refUrl=\"https://www.canarabank.in/\" subType=\"PAY\" ts=\"2024-04-23T12:53:49.340+05:30\" type=\"DEBIT\">\n"
				+ "        <RiskScores>\n" + "            <Score provider=\"NPCI\" type=\"TXNRISK\" value=\"00000\"/>\n"
				+ "            <Score provider=\"NPCI\" type=\"DPS\" value=\"671\" role=\"PAYER\" level=\"BANK\"/>\n"
				+ "            <Score provider=\"NPCI\" type=\"ENGAGEMENT\" value=\"596\" role=\"PAYER\" level=\"BANK\"/>\n"
				+ "            <Score provider=\"NPCI\" type=\"CONSISTENCY\" value=\"862\" role=\"PAYER\" level=\"BANK\"/>\n"
				+ "            <Score provider=\"NPCI\" type=\"SEGMENTATION\" value=\"646\" role=\"PAYER\" level=\"BANK\"/>\n"
				+ "            <Score provider=\"NPCI\" type=\"QUALITY\" value=\"601\" role=\"PAYER\" level=\"BANK\"/>\n"
				+ "            <Score provider=\"NPCI\" type=\"AML\" value=\"601\" role=\"PAYER\"/>\n"
				+ "        </RiskScores>\n" + "    </Txn>\n"
				+ "    <Payer addr=\"shujat188@cnrb\" code=\"0000\" name=\"GEETHA L D\" seqNum=\"1\" type=\"PERSON\">\n"
				+ "        <Info>\n"
				+ "            <Identity id=\"0507101329234\" type=\"ACCOUNT\" verifiedName=\"GEETHA L D\"/>\n"
				+ "            <Rating verifiedAddress=\"TRUE\"/>\n" + "        </Info>\n" + "        <Device>\n"
				+ "            <Tag name=\"MOBILE\" value=\"917048954388\"/>\n"
				+ "            <Tag name=\"GEOCODE\" value=\"28.6288331,77.3732344\"/>\n"
				+ "            <Tag name=\"LOCATION\" value=\"Noida\"/>\n"
				+ "            <Tag name=\"IP\" value=\"180.151.102.34\"/>\n"
				+ "            <Tag name=\"TYPE\" value=\"MOB\"/>\n"
				+ "            <Tag name=\"ID\" value=\"b99de5c2018cdf47\"/>\n"
				+ "            <Tag name=\"OS\" value=\"CAN-ANDROID\"/>\n"
				+ "            <Tag name=\"APP\" value=\"com.canarabank.mobility\"/>\n"
				+ "            <Tag name=\"CAPABILITY\" value=\"520000020001000201309917048954388\"/>\n"
				+ "        </Device>\n" + "        <Ac addrType=\"ACCOUNT\">\n"
				+ "            <Detail name=\"IFSC\" value=\"CNRB0000000\"/>\n"
				+ "            <Detail name=\"ACTYPE\" value=\"SAVINGS\"/>\n"
				+ "            <Detail name=\"ACNUM\" value=\"0507101329234\"/>\n" + "        </Ac>\n"
				+ "        <Creds>\n" + "            <Cred subType=\"MPIN\" type=\"PIN\">\n"
				+ "                <Data code=\"159015\" ki=\"20290312\">W5RNAR38etSVTmy0v0tJapJqxUnWfmeRs2TnMgZFyRRTrdgugAZYWmzm3JMIItk2dqGAWYyGEaAhLrslg1tMsO7V+XmbqT/0NiYUyQis/3IyZR6hoiA521ZktSL5x/iFVtUYbiuHmsGno8ox3LF8QgnevcAPblkieD5p6PKDg9x+s7V0IL9ceD9R2beFUawIO7lVVcLDhwuLaoUudoh0dDrKGFJQEcgqYhrfMeNQ1mqhUJhXA1FPGwHbz92+6EJ0SbVVcXE14uFkRnrEPRrmN/8/USetQQZcDxk/emxB0M6WEEgdnq7tOMX5K/ByM/WZQz2NsP5IZdpLM0CjkJLm/g==</Data>\n"
				+ "            </Cred>\n" + "        </Creds>\n" + "        <Amount curr=\"INR\" value=\"20.00\"/>\n"
				+ "    </Payer>\n" + "    <Payees>\n"
				+ "        <Payee addr=\"kamalkatiyar@cnrb\" code=\"0000\" name=\"KAMAL KATIYAR\" seqNum=\"1\" type=\"PERSON\">\n"
				+ "            <Info>\n"
				+ "                <Identity id=\"2103101010728\" type=\"ACCOUNT\" verifiedName=\"SUKHDEV   RAJ\"/>\n"
				+ "                <Rating verifiedAddress=\"TRUE\"/>\n" + "            </Info>\n"
				+ "            <Ac addrType=\"ACCOUNT\">\n"
				+ "                <Detail name=\"IFSC\" value=\"CNRB0000000\"/>\n"
				+ "                <Detail name=\"ACTYPE\" value=\"SAVINGS\"/>\n"
				+ "                <Detail name=\"ACNUM\" value=\"2103101010728\"/>\n" + "            </Ac>\n"
				+ "            <Amount curr=\"INR\" value=\"20.00\"/>\n" + "        </Payee>\n" + "    </Payees>\n"
				+ "    <Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\">\n" + "        <SignedInfo>\n"
				+ "            <CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\"/>\n"
				+ "            <SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/>\n"
				+ "            <Reference URI=\"\">\n" + "                <Transforms>\n"
				+ "                    <Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/>\n"
				+ "                </Transforms>\n"
				+ "                <DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/>\n"
				+ "                <DigestValue>Pb32RbFgFMQuATXrF5gANXmq8aJjpF247MIn8a+Rxks=</DigestValue>\n"
				+ "            </Reference>\n" + "        </SignedInfo>\n"
				+ "        <SignatureValue>MLCcxNAWAUICRgpegwJUstqh2bWnww4xg2VxBJX8aPpYxIIyHDVRX12jbu+FCua3qJ5Pu1sM/Y70&#xD;\n"
				+ "5zsiTCCh1TrPV3gcHRYv+mk2rdxKQxjK2GL82I8xor7Uw2WsWsFgOs0dnrRNPIwQ+fHtkF/zocND&#xD;\n"
				+ "W23gwZiKCAVG/fvzyysBqr+u0FjA3FTyuH/yHzvE0N8lnw50P3zp4A10hxBn7WXIkXjWdB7MrGjl&#xD;\n"
				+ "SBXmVEkrUZCySs9q8e6QpOiqXthrRDtEtGPMuUJOloGr8YVnDto+T8uf/L1H2tszADpiFgKPsntI&#xD;\n"
				+ "HRl2yXTbk9/mS4lCj1iUoncMCSxLWLkv2Ql5xg==</SignatureValue>\n" + "    </Signature>\n"
				+ "</ns2:ReqPay>";

		ReqPay req = checkReqPayAndRetMsgId(request);
		System.out.println(req);
		
		getRepo();
		getDPS(req);

		

	}

	public static void getDPS(ReqPay reqPay) {
		UpiCCDpsAmlHist dps = new UpiCCDpsAmlHist();
		String role =  "PAYER" ;
//		dps.setTxnId(txn.getTxnId());
//		dps.setTxnType(txn.getTxnType());
//		dps.setCcNum(txn.getPayerEncryptedCc());
//		dps.setCcMaskedNum(txn.getPayerMaskedCc());
//		dps.setCcAccRefNo(cardDetails.getCcAccRefNo());
//		dps.setNpciAccNo(cardDetails.getNpciAccNo());
//		dps.setCreatedDateTime(txn.getStartDatetime());

		if (reqPay.getTxn().getRiskScores() != null && reqPay.getTxn().getRiskScores().getScore() != null
				&& !reqPay.getTxn().getRiskScores().getScore().isEmpty()) {

			dps.setDpsScore(String.valueOf(extractScore(reqPay.getTxn().getRiskScores().getScore(), "DPS", role)));
			dps.setEngagementScore(
					String.valueOf(extractScore(reqPay.getTxn().getRiskScores().getScore(), "ENGAGEMENT", role)));
			dps.setConsistencyScore(
					String.valueOf(extractScore(reqPay.getTxn().getRiskScores().getScore(), "CONSISTENCY", role)));
			dps.setSegmentationScore(
					String.valueOf(extractScore(reqPay.getTxn().getRiskScores().getScore(), "SEGMENTATION", role)));
			dps.setQualityScore(
					String.valueOf(extractScore(reqPay.getTxn().getRiskScores().getScore(), "QUALITY", role)));
			dps.setAmlScore(String.valueOf(extractScore(reqPay.getTxn().getRiskScores().getScore(), "AML", role)));

		}
		
		
		
		System.out.println("=========================="+dps);
//    	}

	}

	public static ReqPay checkReqPayAndRetMsgId(String xmlStr) {

		try {
			ReqPay ob = unmarshal(xmlStr, ReqPay.class);
			if (ob != null) {
				System.out.println("TxnType-[{}], TxnId-[{}], MsgId-[{}] " + ob.getTxn().getType() + ob.getTxn().getId()
						+ ob.getHead().getMsgId());
				return ob;
			}

		} catch (Exception e) {
			System.out.println("Error while unmarshal ReqPay {}" + e);
		}
		return null;

	}

	private static final ConcurrentHashMap<String, JAXBContext> contextMap = new ConcurrentHashMap<String, JAXBContext>();

	private static <T> T unmarshal(String xmlStr, Class<T> t) throws Exception {

		try (StringReader sr = new StringReader(xmlStr);) {
			JAXBContext jAXBContext = contextMap.get(t.getSimpleName());
			if (jAXBContext == null) {
				jAXBContext = JAXBContext.newInstance(t);
				contextMap.putIfAbsent(t.getSimpleName(), jAXBContext);
				System.out.println("INFO ***** contextMap {}" + jAXBContext);
			}
			Unmarshaller unmarshaller = jAXBContext.createUnmarshaller();
			Object obj = unmarshaller.unmarshal(sr);
			return (T) obj;
		} catch (Exception e) {
			System.out.println("error while Unmarsheling {}" + e);
			System.out.println("error while Unmarshalling apiClass={} ,errorMsg={} ,xmlStr={} " + t.getName()
					+ e.getMessage() + xmlStr);
		}

		return null;
	}

	private static String extractScore(List<Score> scores, String type, String role) {
		return scores.stream().filter(f -> f.getType().equalsIgnoreCase(type) && f.getRole().equalsIgnoreCase(role))
				.map(Score::getValue).findFirst().orElse(null); // or return a default value if needed
	}
}
